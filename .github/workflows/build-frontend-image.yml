# This is a basic workflow to help you get started with Actions

name: Build, push and deploy the frontend image to EKS.

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    paths: 
      - 'src/frontend/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-docker-image-and-push-to-harbor:
    # The type of runner that the job will run on
    runs-on: self-hosted
#     env:
# #       DOCKER_CONTENT_TRUST: 1
# #       DOCKER_CONTENT_TRUST_SERVER: "https://harbordemo351.tk:4443"
      
# #       NOTARY_ROOT_PASSPHRASE: "${{ secrets.NOTARY_ROOT_PASSPHRASE }}"
# #       NOTARY_TARGETS_PASSPHRASE: "${{ secrets.NOTARY_TARGETS_PASSPHRASE }}"
# #       NOTARY_SNAPSHOT_PASSPHRASE: "${{ secrets.NOTARY_SNAPSHOT_PASSPHRASE }}"
#       DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE: "${{ secrets.DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE }}"
#       DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: "${{ secrets.DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE }}"
#       DOCKER_CONTENT_TRUST_OFFLINE_PASSPHRASE: "${{ secrets.DOCKER_CONTENT_TRUST_OFFLINE_PASSPHRASE }}"
#       DOCKER_CONTENT_TRUST_TAGGING_PASSPHRASE: "${{ secrets.DOCKER_CONTENT_TRUST_TAGGING_PASSPHRASE }}"

    defaults:
      run:
        working-directory: ./src/frontend

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

#       Prune all images and containers
      - name: prune
        run: yes | sudo docker system prune -a

#       Builds the docker image
#       - name: build 
#         run: sudo docker build ./ -t frontend
# #        Testing purposes
# #       - name: test
# #         run: sudo docker images
        
#       - name: login to harbor
#         run: echo "${{ secrets.HARBOR_PWD }}" | sudo docker login harbordemo351.tk -u "${{ secrets.HARBOR_USERNAME }}" --password-stdin

#       - name: tag the image
#         run: sudo docker tag frontend harbordemo351.tk/demo/frontend
      
#       - name: push the image
#         run: sudo docker push harbordemo351.tk/demo/frontend
 
  deploy-to-eks:
    needs: build-docker-image-and-push-to-harbor
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

#       - name: Trigger deploy
#         uses: Consensys/kubernetes-action@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         with:
#           args: apply -f kubernetes-manifests/kubernetes-manifests.yaml

#       - name: update kubeconfig file
#         run: aws eks --region ap-south-1 update-kubeconfig --name my-cluster

#       - name: kubectl trigger deploy
#         run: kubectl apply -f kubernetes-manifests/kubernetes-manifests.yaml
      
#       - name: Get the pod name
#         uses: Consensys/kubernetes-action@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         with:
#           args: get pods -o=name | grep adservice | sed "s/^.\{4\}//"
#           run: echo "::set-output name=pod-name::$(mix test)\n"
      
#       - name: Update particular pod
#         uses: Consensys/kubernetes-action@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         with:
#           args: delete pods -l app=frontend

#       - name: kubectl update particular pod
#         run: kubectl delete pods -l app=frontend
          
#       - name: list
#         run: kubectl get pods
        
  Polaris:
    needs: deploy-to-eks
    runs-on: self-hosted
    
    steps:
      - uses: actions/checkout@v2
      
      - name: install polaris
        run: |
          brew tap FairwindsOps/tap
          brew install FairwindsOps/tap/polaris
          polaris version
      
      - name: audit
        run:  polaris audit --audit-path kubernetes-manifests/kubernetes-manifests.yaml --format=json | sudo tee -a /var/www/html/polaris.json
  
#   kubeaudit:
#     # The type of runner that the job will run on
#     needs: deploy-to-eks
#     runs-on: ubuntu-latest

#     defaults:
#       run:
#         working-directory: ./kubernetes-manifests

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2
      
#       - name: install
#         run: brew install kubeaudit
    
#       - name: run tests
#         run: kubeaudit all -f ./kubernetes-manifests.yaml || true


#   kube-bench:
#     # The type of runner that the job will run on
#     needs: deploy-to-eks
#     runs-on: ubuntu-latest

#     defaults:
#       run:
#         working-directory: ./kube-bench
#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v2
      
#       - name: download kube-bench image and push
#         run: |
#               git clone https://github.com/aquasecurity/kube-bench.git
#               cd kube-bench
#               echo "${{ secrets.HARBOR_PWD }}" | sudo docker login harbordemo351.tk -u "${{ secrets.HARBOR_USERNAME }}" --password-stdin
#               sudo docker build -t k8s/kube-bench .
#               sudo docker tag k8s/kube-bench:latest harbordemo351.tk/demo/kube-bench
#               sudo docker push harbordemo351.tk/demo/kube-bench
              
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-south-1
          
#       - name: delete previous job if present
#         uses: Consensys/kubernetes-action@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         with:
#           args: delete job kube-bench --ignore-not-found=true

#       - name: deploy as job
#         uses: Consensys/kubernetes-action@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         with:
#           args: apply -f kube-bench/job-eks.yaml

#       - name: find the pod 
#         uses: Consensys/kubernetes-action@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         with:
#           args: get pods -l job-name=kube-bench -o custom-columns=:metadata.name 
      
#       - name: publish the logs
#         uses: Consensys/kubernetes-action@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         with:
#           args: logs job/kube-bench
