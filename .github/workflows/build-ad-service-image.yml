# This is a basic workflow to help you get started with Actions

name: Build, push and deploy the adservice image to EKS.

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    paths: 
      - 'src/adservice/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-docker-image-and-push-to-harbor:
    env:
      DOCKER_CONTENT_TRUST: 1
      DOCKER_CONTENT_TRUST_SERVER: "${{ secrets.DOCKER_CONTENT_TRUST_SERVER }}"
      DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE: "${{ secrets.DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE }}"
      DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE: "${{ secrets.DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE }}"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./src/adservice

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
#       Builds the docker image
      - name: build 
        run: sudo docker build ./ -t adservice
#        Testing purposes
#       - name: test
#         run: sudo docker images
        
      - name: login to harbor
        run: echo "${{ secrets.HARBOR_PWD }}" | docker login harbordemo351.tk -u "${{ secrets.HARBOR_USERNAME }}" --password-stdin

      - name: tag the image
        run: docker tag adservice harbordemo351.tk/demo/adservice
      
      - name: try
        run: docker trust key load key.pem
      
      
      - name: push the image
        run: docker push harbordemo351.tk/demo/adservice

#   deploy-to-eks:
#     needs: build-docker-image-and-push-to-harbor
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-south-1

#       - name: Trigger deploy
#         uses: Consensys/kubernetes-action@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         with:
#           args: apply -f kubernetes-manifests/kubernetes-manifests.yaml
      
# #       - name: Get the pod name
# #         uses: Consensys/kubernetes-action@master
# #         env:
# #           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
# #         with:
# #           args: get pods -o=name | grep adservice | sed "s/^.\{4\}//"
# #           run: echo "::set-output name=pod-name::$(mix test)\n"
      
#       - name: Update particular pod
#         uses: Consensys/kubernetes-action@master
#         env:
#           KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
#         with:
#           args: delete pods -l app=adservice
          
#   polaris-scan:
#     needs: deploy-to-eks
#     runs-on: ubuntu-latest
    
#     steps:
#       - uses: actions/checkout@v2
      
#       - name: install polaris
#         run: |
#           brew tap FairwindsOps/tap
#           brew install FairwindsOps/tap/polaris
#           polaris version
      
#       - name: audit
#         run: polaris audit --audit-path kubernetes-manifests/kubernetes-manifests.yaml --format=pretty
    
